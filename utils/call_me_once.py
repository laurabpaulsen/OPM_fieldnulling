import struct
def intBitsToFloat(b):
   s = struct.pack('>l', b)
   return struct.unpack('>f', s)[0]

array = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '30635', '30635', '30635', '553678763', '30635', '30635', '30635', '30635', '50362283', '30635', '30635', '30635', '587233195', '604010411', '553678763', '33583239', '570455979', '553678763', '570455979', '30635', '30635', '30635', '553678763', '570455979', '30635', '30635', '33585067', '587233195', '30635', '587233195', '30635', '33583111', '30635', '50362283', '30635', '620787627', '30635', '30635', 
'30635', '30635', '30635', '620787627', '620787627', '50362283', '570455979', '30635', '553678763', '30635']

if __name__ == "__main__":
#    which_num = int(input("Give index for Uint32_t array!"))
    # print(len(array))
#    packed_v = struct.pack('>l', b)
    # print(intBitsToFloat(30635))
    val = '1803'
    # val = int(1803)
    print(val)
    # print(str(val))
    # print(f"0x{val:08X}")
    print(str(format(int(val), "032b"))[13:])

# 0000-0000 0000-0000 0111-0111 1010-1011
# 0000000000000 0000111011100101011
# 0000000000000 0000000011100001011
 